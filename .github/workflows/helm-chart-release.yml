name: Helm Chart Release

on:
  push:
    branches:
      - main
    paths:
      - '03_apps/charts/application-wrapper/**'
  pull_request:
    paths:
      - '03_apps/charts/application-wrapper/**'
  workflow_dispatch:
    inputs:
      force_publish:
        description: 'Force publish even without changes'
        required: false
        default: false
        type: boolean

env:
  CHART_DIR: 03_apps/charts/application-wrapper
  REGISTRY: ghcr.io
  CHART_NAME: application-wrapper

jobs:
  # Lint and validate the Helm chart
  helm-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.13.0'
          
      - name: Lint Helm chart
        run: |
          helm lint ${{ env.CHART_DIR }}
          
  # Package the Helm chart
  helm-package:
    needs: helm-lint
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    outputs:
      chart-version: ${{ steps.chart-info.outputs.version }}
      chart-exists: ${{ steps.check-release.outputs.exists }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.13.0'
          
      - name: Get chart info
        id: chart-info
        run: |
          VERSION=$(helm show chart ${{ env.CHART_DIR }} | grep '^version:' | cut -d' ' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Chart version: $VERSION"
          
      - name: Check if release already exists
        id: check-release
        run: |
          # Check if this version already exists in the registry
          if helm show chart oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.CHART_NAME }} --version ${{ steps.chart-info.outputs.version }} >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Chart version ${{ steps.chart-info.outputs.version }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Chart version ${{ steps.chart-info.outputs.version }} does not exist"
          fi
          
      - name: Package Helm chart
        if: steps.check-release.outputs.exists == 'false' || github.event.inputs.force_publish == 'true'
        run: |
          mkdir -p /tmp/helm-packages
          helm package ${{ env.CHART_DIR }} --destination /tmp/helm-packages
          
      - name: Upload packaged chart
        if: steps.check-release.outputs.exists == 'false' || github.event.inputs.force_publish == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: helm-chart-${{ steps.chart-info.outputs.version }}
          path: /tmp/helm-packages/*.tgz
          retention-days: 30

  # Publish to GitHub Container Registry (OCI)
  helm-publish:
    needs: helm-package
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/main' && 
      (needs.helm-package.outputs.chart-exists == 'false' || github.event.inputs.force_publish == 'true')
    permissions:
      contents: write  # For creating git tags and releases
      packages: write  # For publishing to GitHub Container Registry
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.13.0'
          
      - name: Download packaged chart
        uses: actions/download-artifact@v4
        with:
          name: helm-chart-${{ needs.helm-package.outputs.chart-version }}
          path: /tmp/helm-packages
          
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Publish Helm chart to OCI registry
        run: |
          CHART_FILE=$(find /tmp/helm-packages -name "*.tgz" | head -1)
          echo "Publishing chart: $CHART_FILE"
          
          # Push to GitHub Container Registry as OCI artifact
          helm push "$CHART_FILE" oci://${{ env.REGISTRY }}/${{ github.repository_owner }}
          
          echo "âœ… Chart published successfully!"
          echo "ðŸ“¦ Chart available at: oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.CHART_NAME }}:${{ needs.helm-package.outputs.chart-version }}"
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.CHART_NAME }}-${{ needs.helm-package.outputs.chart-version }}
          name: "Helm Chart ${{ env.CHART_NAME }} v${{ needs.helm-package.outputs.chart-version }}"
          body: |
            ## Helm Chart Release: ${{ env.CHART_NAME }} v${{ needs.helm-package.outputs.chart-version }}
            
            ### ðŸ“¦ Installation
            
            ```bash
            # Add the repository
            helm repo add my-charts oci://${{ env.REGISTRY }}/${{ github.repository_owner }}
            
            # Install the chart
            helm install my-release oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.CHART_NAME }} --version ${{ needs.helm-package.outputs.chart-version }}
            ```
            
            ### ðŸ”— Links
            - **Chart**: `oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.CHART_NAME }}:${{ needs.helm-package.outputs.chart-version }}`
            - **Registry**: https://github.com/${{ github.repository_owner }}/packages
            
            ### ðŸ“‹ Changes
            This release includes updates to the application-wrapper Helm chart.
          files: /tmp/helm-packages/*.tgz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Security scan (optional but recommended)
  security-scan:
    needs: helm-package
    runs-on: ubuntu-latest
    if: needs.helm-package.outputs.chart-exists == 'false' || github.event.inputs.force_publish == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Download packaged chart
        uses: actions/download-artifact@v4
        with:
          name: helm-chart-${{ needs.helm-package.outputs.chart-version }}
          path: /tmp/helm-packages
          
      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '${{ env.CHART_DIR }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'